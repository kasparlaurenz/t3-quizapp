generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Question {
    id                         String                       @id @default(cuid())
    createdAt                  DateTime                     @default(now())
    question                   String
    imageUrl                   String?
    imageName                  String?
    chapterId                  String
    chapter                    Chapter                      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    answers                    Answer[]
    RecentUserAnswerToQuestion RecentUserAnswerToQuestion[]
    isHidden                   Boolean                      @default(false)
}

model Answer {
    id         String   @id @default(cuid())
    answer     String
    is_correct Boolean
    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Chapter {
    id                         String                       @id @default(cuid())
    number                     Int                          @unique
    description                String
    questions                  Question[]
    RecentUserAnswerToQuestion RecentUserAnswerToQuestion[]
    isHidden                   Boolean                      @default(false)
    categories                 CategoriesOnChapter[]
}

model Category {
    id       String                @id @default(cuid())
    name     String                @unique
    isHidden Boolean               @default(false)
    chapters CategoriesOnChapter[]
}

model CategoriesOnChapter {
    chapterId  String
    chapter    Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@id([chapterId, categoryId])
}

model User {
    id                         String                       @id @default(cuid())
    username                   String                       @unique
    password                   String
    createdAt                  DateTime                     @default(now())
    updatedAt                  DateTime                     @updatedAt
    role                       Role                         @default(GUEST)
    RecentUserAnswerToQuestion RecentUserAnswerToQuestion[]
}

model RecentUserAnswerToQuestion {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    questionId  String
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    chapterId   String
    chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    answerState Boolean  @default(false)
}

enum Role {
    ADMIN
    USER
    GUEST
}
